openapi: 3.0.0
info:
  title: API Exemplo - Portal Empresarial
  version: 1.0.0
  description: |
    API de demonstração para o portal empresarial.
    
    Esta API serve como exemplo de como documentar endpoints
    usando OpenAPI 3.0 e Swagger UI.
    
    ## Funcionalidades
    - Gestão de usuários
    - Autenticação
    - Operações CRUD básicas
  contact:
    name: Equipe de Desenvolvimento
    email: dev@empresa.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: "{server}/api/v1"
    description: Servidor da API
    variables:
      server:
        default: https://api.empresa.com
        description: URL base do servidor
        enum:
          - https://api.empresa.com
          - https://api-dev.empresa.com
          - http://localhost:8080

paths:
  /usuarios:
    get:
      summary: Listar usuários
      description: Retorna uma lista paginada de usuários do sistema
      tags:
        - Usuários
      parameters:
        - name: page
          in: query
          description: Número da página
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Quantidade de itens por página
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Usuario'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: Parâmetros inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Criar usuário
      description: Cria um novo usuário no sistema
      tags:
        - Usuários
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Usuário já existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /usuarios/{id}:
    get:
      summary: Buscar usuário por ID
      description: Retorna os dados de um usuário específico
      tags:
        - Usuários
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Atualizar usuário
      description: Atualiza os dados de um usuário existente
      tags:
        - Usuários
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Excluir usuário
      description: Remove um usuário do sistema
      tags:
        - Usuários
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Usuário excluído com sucesso
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Fazer login
      description: Autentica um usuário e retorna um token de acesso
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - senha
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@empresa.com
                senha:
                  type: string
                  format: password
                  example: minhasenha123
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  usuario:
                    $ref: '#/components/schemas/Usuario'
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nome:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao.silva@empresa.com
        telefone:
          type: string
          example: (11) 99999-9999
        ativo:
          type: boolean
          example: true
        criadoEm:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        atualizadoEm:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
    
    UsuarioInput:
      type: object
      required:
        - nome
        - email
      properties:
        nome:
          type: string
          minLength: 2
          maxLength: 100
          example: João Silva
        email:
          type: string
          format: email
          example: joao.silva@empresa.com
        telefone:
          type: string
          pattern: '^\([0-9]{2}\) [0-9]{4,5}-[0-9]{4}$'
          example: (11) 99999-9999
        ativo:
          type: boolean
          default: true
          example: true
    
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 15
    
    Error:
      type: object
      properties:
        codigo:
          type: string
          example: VALIDATION_ERROR
        mensagem:
          type: string
          example: Os dados fornecidos são inválidos
        detalhes:
          type: array
          items:
            type: string
          example:
            - O campo 'nome' é obrigatório
            - O campo 'email' deve ter um formato válido

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []